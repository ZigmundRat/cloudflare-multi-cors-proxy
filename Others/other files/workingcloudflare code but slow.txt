addEventListener('fetch', event => {
    event.respondWith(handleRequest(event.request))
})

/**
 * Respond to the request
 * @param {Request} request
 */
async function handleRequest(request) {
    // Have to add code to get the params
    var myurl = 'https://www.google.com/search?&q=peppermint';

    // passing request in contructor will emulate requests directly from user browsers i.e ip address
    request = new Request(myurl, request)
    // Set Origin to google itself
    request.headers.set('Origin', new URL(myurl).origin)
    // using var instead of let for response variable, seems to solve the problem for 302 document moved error
    // let will have block scope and var will have function scope
    var response = await fetch(request)

    //  let text = await response.text()

    // let linker =   text.search("hello")


    //   var pos =   text.search('google')

    // Recreate the response so we can modify the headers
    // response = new Response(response.body, response)
    // Set CORS headers
    // response.headers.set('Access-Control-Allow-Origin', '*')

    // Append to/Add Vary header so browser will cache response correctly
    // response.headers.append('Vary', 'Origin')
    //   const rewriter = new HTMLRewriter().on('a[href]', new ElementHandler())


    var restext = await response.text()
    // return array with href


    //  let links =  getlinks(restext)
    var purelink = []
    {

        var hreflinks = restext.match(/href\s*?=\s*?('|").+?('|")/g) || [];


        // ref: https://stackoverflow.com/questions/3010840/loop-through-an-array-in-javascript
        for (link of hreflinks) {
            link = link.match(/(http|https).+?('|"|&amp;)/) || [];

            if (link.length > 0 && !ignorepattern.test(link[0])) {
                if (link[0].charAt(link[0].length - 1) == ';') {
                    link[0] = link[0].substring(0, link[0].length - 5)
                }
                else {
                    link[0] = link[0].substring(0, link[0].length - 1)
                }
                purelink.push(unescape(link[0]))


            }

        }

        purelink = Array.from(new Set(purelink));

    //   purelink = new Set(purelink)

    }


//slicing ,getting first n links from array
  //purelink= purelink.slice(0,1)





    for (link of purelink) {

        request = new Request(link, request)
        // Set Origin to google itself
        request.headers.set('Origin', new URL(link).origin)
        // using var instead of let for response variable, seems to solve the problem for 302 document moved error
        // let will have block scope and var will have function scope
        let response = await fetch(request)
        // response = new Response(response.body, response)
        // Set CORS headers
        // response.headers.set('Access-Control-Allow-Origin', '*')

        // Append to/Add Vary header so browser will cache response correctly
        // response.headers.append('Vary', 'Origin')



        responsearr.push(response)
        let resret = await response.text()
        textarr.push(resret)


    }

    var responses = await Promise.all(responsearr)

    var results = await Promise.all(textarr)

    // Recreate the response so we can modify the headers
   // response = new Response(results, responses)

    response = new Response(results)
    // Set CORS headers
    response.headers.set('Access-Control-Allow-Origin', '*')

    // Append to/Add Vary header so browser will cache response correctly
    response.headers.append('Vary', 'Origin')
   //  response.headers.set('content-type', 'text/html;')

    return response
 //     return new Response(results, {status: 200 , headers: {
   //      'Access-Control-Allow-Origin':'*',
  //       'Vary':'Origin',
   //     }} )


    // toy =  toy.replace(/google/gi, 'panda')

 //   return response
    // return new Response(toy, {status: 200})

    // const rewriter = new HTMLRewriter().on('a[href]', new FetchLinks())
    //  let newresponse = rewriter.transform(response)

    // const results = await Promise.all(responses)
    // response = new Response(results.body, response)
    // Set CORS headers
    // response.headers.set('Access-Control-Allow-Origin', '*')

    // Append to/Add Vary header so browser will cache response correctly
    // response.headers.append('Vary', 'Origin')



    // return response
    // return new Response(console.log(links), {status: 200})
    //  return newresponse

    // return response
    //  return new Response(abc, {status: 200})



}
// var abc = 'anna'
// var linkpattern = /https?:\/\/.*?&amp;/
var ignorepattern = /(google|youtube|#)/
// var links = []
// var responses = []
var responsearr = []
var textarr = []

/*

class FetchLinks {
    element(element) {
        // An incoming element, such as `div`
        //  console.log(`Incoming element: ${element.getAttribute('href')}`)


        let linkarray = `${element.getAttribute('href')}`.match(linkpattern)
        if (Array.isArray(linkarray) && linkarray.length > 0) {
            // Ref: https://stackoverflow.com/questions/11743392/check-if-an-array-is-empty-or-exists
            if (!ignorepattern.test(linkarray[0])) {

                // Remove &amp; and unescape the link
                linkarray[0] = linkarray[0].substring(0, linkarray[0].length - 5)
                linkarray[0] = unescape(linkarray[0]);
                // links.push(linkarray[0])
                console.log(linkarray[0])
                // code to fetch the links

                request = new Request(linkarray[0], request)
                // Set Origin to google itself
                request.headers.set('Origin', new URL(linkarray[0]).origin)
                // using var instead of let for response variable, seems to solve the problem for 302 document moved error
                // let will have block scope and var will have function scope
                // have to write code to remove/avoid multiple same links

                // let res = await fetch(request)
                responses.push(res)
                // let text = await response.text()

                // let linker =   text.search("hello")


                //   var pos =   text.search('google')

                // Recreate the response so we can modify the headers
                // response = new Response(response.body, response)
                // Set CORS headers
                // response.headers.set('Access-Control-Allow-Origin', '*')

                // Append to/Add Vary header so browser will cache response correctly
                // response.headers.append('Vary', 'Origin')



                // return response





            }


        }

        //  console.log(`${element.getAttribute('href')}`)

    }

    comments(comment) {
        // An incoming comment
    }

    text(text) {
        // An incoming piece of text
    }
}


function getlinks(src) {
    var purelink = []
    let hreflinks = src.match(/href\s*?=\s*?('|").+?('|")/g) || [];


    // ref: https://stackoverflow.com/questions/3010840/loop-through-an-array-in-javascript
    for (link of hreflinks) {
        link = link.match(/(http|https).+?('|"|&amp;)/) || [];

        if (link.length > 0 && !ignorepattern.test(link[0])) {
            if (link[0].charAt(link[0].length - 1) == ';') {
                link[0] = link[0].substring(0, link[0].length - 5)
            }
            else {
                link[0] = link[0].substring(0, link[0].length - 1)
            }
            purelink.push(unescape(link[0]))


        }

    }

    return Array.from(new Set(purelink));



}

*/
